" Modified from colleagues

"
" Bash-support
"
let g:BASH_AuthorName   = 'amazonsx'
let g:BASH_AuthorRef    = 'amazonsx'
let g:BASH_Company      = 'CARC, ICT'
let g:BASH_Email        = ''

"
" Use vim settings rather than vi's.
" Set it in the first place, as it may change other options.
"
set nocompatible
filetype  plugin on " Enable file type detection plugin.
filetype  indent on " Load indent files for specific file types.
syntax    on        " Switch syntax highlighting on.

"
" Platform specific items:
" - central backup directory (has to be created)
" - default dictionary
" Uncomment your choice.  
"
if  has("win16") || has("win32")     || has("win64") || 
  \ has("win95") || has("win32unix")
    "
"    runtime mswin.vim
"    set backupdir =$VIM\vimfiles\backupdir
"    set dictionary=$VIM\vimfiles\wordlists/german.list
else
"    set backupdir =$HOME/.vim.backupdir
"    set dictionary=$HOME/.vim/wordlists/german.list
endif

"
" Various settings
"

" Use a backupdir in GNU/Linux:
" you may need to contain a cmd line,
" find $HOME/.vim.backupdir -name "*" -type f -mtime +60 -exec rm -f {} \;
" in one of your shell startup files(e.g. $HOME/.profile).
" set backupdir=./.vim-backup,.
" set directory=./.vim-backup,.
" set backup                      " keep a backup file

set number 			            " show the line number
set autoindent                  " copy indent from current line
"set autoread                    " read open files again when changed outside Vim
set autowrite                   " write a modified buffer on each :next , ...
set backspace=indent,eol,start  " backspacing over everything in insert mode
set browsedir=current           " which directory to use for the file browser
set complete+=k                 " scan the files given with the 'dictionary' option
set history=50                  " keep 50 lines of command line history
set hlsearch                    " highlight the last used search pattern
"set ic
set incsearch                   " do incremental searching
set laststatus=2
set listchars=tab:>.,eol:\$     " strings to use in 'list' mode
"set mouse=a                     " enable the use of the mouse
set nocompatible
set wrap                        " do not wrap lines
set nu
set popt=left:8pc,right:3pc     " print options
set ruler                       " show the cursor position all the time
set smarttab
set showcmd                     " display incomplete commands
set smartindent                 " smart autoindenting when starting a new line

"set tabstop=4                   " number of spaces that a <Tab> counts for
"set shiftwidth=4                " number of spaces to use for each step of indent
"set sts=4
"set expandtab                   " convert tab into spaces, cooperated with sts
" for c & linux kernel devel
" autocmd Filetype c,cpp set tabstop=8 softtabstop=8 shiftwidth=8 noexpandtab

"set visualbell                  " visual bell instead of beeping
set wildignore=*.bak,*.o,*.e,*~ " wildmenu: ignore these extensions
set wildmenu                    " command-line completion in an enhanced mode
set tags=tags;:mrgreen:

"let g:EchoFuncShowOnStatus = 1     
"set statusline=%f%*\ %y\ %2*%r%m%*\ %l,%c\ %=%l/%L\ (%p%%)%*\ %{strftime('%Y-%m-%d-%H:%M')} "\%{EchoFuncGetStatusLine()} 
"set statusline=%F%m%r%h%w\ [FORMAT=%{&ff}]\ [TYPE=%Y]\ [ASCII=\%03.3b]\ [HEX=\%02.2B]\ [POS=%04l,%04v][%p%%]\ [LEN=%L] 
set statusline=%F%m%r%h%w\ [TYPE=%Y]\ [ASCII=\%03.3b]\ [HEX=\%02.2B]\ [POS=%04l,%04v][%p%%]\ [LEN=%L] 
set laststatus=2                " show at the second last line 
hi statusline gui=bold guifg=fg guibg=lightgreen

set fileencodings=ascii,utf-8,gbk,ucs-bom,cp936
set foldmethod=indent           "enable code folding, use za to open and close a fold in normal mode
set foldlevel=99

"
" BUFFERS, WINDOWS
"

" The current directory is the directory of the file in the current window.
if has("autocmd")
  autocmd BufEnter * :lchdir %:p:h
endif

"
" close window (conflicts with the KDE setting for calling the process manager)
"
 noremap  <C-Esc>       :close<CR>
inoremap  <C-Esc>  <C-C>:close<CR>
"
" Fast switching between buffers
" The current buffer will be saved before switching to the next one.
" Choose :bprevious or :bnext
"
 noremap  <silent> <s-tab>       :if &modifiable && !&readonly && 
     \                      &modified <CR> :write<CR> :endif<CR>:bprevious<CR>
inoremap  <silent> <s-tab>  <C-C>:if &modifiable && !&readonly && 
     \                      &modified <CR> :write<CR> :endif<CR>:bprevious<CR>

nnoremap  <C-q>    :wqall<CR>   " Leave the editor with Ctrl-q (KDE): Write all changed buffers and exit Vim

 map  <silent> <s-tab>  <Esc>:if &modifiable && !&readonly && 
     \                  &modified <CR> :write<CR> :endif<CR>:bprevious<CR>
imap  <silent> <s-tab>  <Esc>:if &modifiable && !&readonly && 
     \                  &modified <CR> :write<CR> :endif<CR>:bprevious<CR>

nmap  <C-q>    :wqa<CR> " Leave the editor with Ctrl-q : Write all changed buffers and exit Vim

"
" When editing a file, always jump to the last known cursor position.
" Don't do it when the position is invalid or when inside an event handler
" (happens when dropping a file on gvim).
"
if has("autocmd")
  autocmd BufReadPost *
        \ if line("'\"") > 0 && line("'\"") <= line("$") |
        \   exe "normal! g`\"" |
        \ endif
endif " has("autocmd")

"
" Hot Keys 
" F2  -  write file without confirmation
" F3  -  call file explorer Ex
" F4  -  show tag under curser in the preview window (tagfile must exist!)
" F5  -  open quickfix error window
" F6  -  close quickfix error window
" F7  -  display previous error
" F8  -  display next error   
"
map   <silent> <F2>        :write<CR>
map   <silent> <F3>        :Explore<CR>
nmap  <silent> <F4>        :exe ":ptag ".expand("<cword>")<CR>
map   <silent> <F5>        :copen<CR>
map   <silent> <F6>        :cclose<CR>
map   <silent> <F7>        :cp<CR>
map   <silent> <F8>        :cn<CR>
"
imap  <silent> <F2>   <Esc>:write<CR>
imap  <silent> <F3>   <Esc>:Explore<CR>
imap  <silent> <F4>   <Esc>:exe ":ptag ".expand("<cword>")<CR>
imap  <silent> <F5>   <Esc>:copen<CR>
imap  <silent> <F6>   <Esc>:cclose<CR>
imap  <silent> <F7>   <Esc>:cp<CR>
imap  <silent> <F8>   <Esc>:cn<CR>

"
" Auto-complete parenthesis, brackets and braces
"
inoremap ( ()<Left>
inoremap [ []<Left>
inoremap { {}<Left>
vnoremap ( s()<Esc>P<Right>%
vnoremap [ s[]<Esc>P<Right>%
vnoremap { s{}<Esc>P<Right>%

"
" Auto-complete quotes (visual and select mode)
"
"xnoremap  '  s''<Esc>P<Right>
"xnoremap  \"  s""<Esc>P<Right> remove the slash char
"xnoremap  `  s``<Esc>P<Right>

"
" Change wd to the dir containing the current file
"
if has("autocmd")
  autocmd BufEnter * :lchdir %:p:h
endif " has("autocmd")

"
" Plugins Configurations
"

"
" CommandT
"

"pydiction 1.2 python auto complete
"let g:pydiction_location = '~/.vim/tools/pydiction/complete-dict'
"defalut g:pydiction_menu_height == 15
"let g:pydiction_menu_height = 20 


"
" taglist.vim : toggle the taglist window
" taglist.vim : define the title texts for make
" taglist.vim : define the title texts for qmake
" 
 noremap <silent> <F11>  <Esc><Esc>:Tlist<CR>
inoremap <silent> <F11>  <Esc><Esc>:Tlist<CR>

let tlist_make_settings  = 'make;m:makros;t:targets'
let tlist_qmake_settings = 'qmake;t:SystemVariables'
let Tlist_Show_One_File = 1
let Tlist_Exit_OnlyWindow = 1
let Tlist_Use_Right_Window = 0 "Assign the pos of Tlist Window opens at
let Tlist_Process_File_Always=1 "Always process the file in read time for ctags

if has("autocmd")
  " ----------  qmake : set filetype for *.pro  ----------
  autocmd BufNewFile,BufRead *.pro  set filetype=qmake
endif " has("autocmd")

"quickfix set for cscope
"set cscopequickfix=s-,c-,d-,i-,t-,e-
set cscopequickfix=d-,i-,t-,e-
map <C-\> :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap <C-_>s :cs find s <C-R>=expand("<cword>")<CR><CR>
nmap <C-_>g :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-_>c :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap <C-_>t :cs find t <C-R>=expand("<cword>")<CR><CR>
nmap <C-_>e :cs find e <C-R>=expand("<cword>")<CR><CR>
nmap <C-_>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <C-_>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap <C-_>d :cs find d <C-R>=expand("<cword>")<CR><CR>
map gt :!ssh  <C-R>=expand("<cword>")<CR><CR><Tab>
"show full path of current file
nmap <C-x>   :echo expand('%:p')<CR> 

"Cusor and Highlight
if version >= 700 
    set cursorline
    hi CursorLine cterm=bold ctermbg=DarkGray
endif
"hi LineNr cterm=underline ctermfg=0 ctermbg=7
"
"let g:WC_min_len=3
":autocmd BufEnter * call DoWordComplete() 
"The following will map <Tab> to either actually insert a <Tab> if 
"the current line is currently only whitespace, or start/continue a CTRL-N 
"completion operation: 
"function! CleverTab() 
"    if strpart( getline('.'), 0, col('.')-1 ) =~ '^\s*$' 
"        return "\<Tab>" 
"    else 
"        return "\<C-N>" 
"endfunction 
"inoremap <Tab> <C-R>=CleverTab()<CR>

"
" Ctags
"
" Generate tags file, covering hot key <F3>.
map <F3> :!ctags -f=./tags -R --append=no --exclude="\.git" --c++-kinds=+cdefglmnpstuvx --c-kinds=+cdefglmnpstuvx --fields=+ialS --extra=+fq --fields=+afiKlmnsSzt --sort=yes --file-scope=yes .<CR> :TlistUpdate<CR>
" imap <F4> :!ctags -f=./tags -R --append=no --exclude="\.git" --c++-kinds=+cdefglmnpstuvx --c-kinds=+cdefglmnpstuvx --fields=+ialS --extra=+fq --fields=+afiKlmnsSzt --sort=yes --file-scope=yes .<CR> :TlistUpdate<CR>

"
" set tags
"
" This will look in the current dir for tags.
" and work up the tree path towards $HOME until tags found.
set tags=./tags;$HOME/
" By default, it just reads the tags file in the current dir. We try to keep a tag file per project, how?
" set tags+=/root/backpack/tags/tags

" Configure the hotkey for complete_code
" Auto Completion, only works in insert mode
let g:completekey = "<C-j>"   
